- type: parallel
  steps:

  - type: parallel
    name: code quality checks
    steps:
      - name: lint
        service: splunk-cloud-sdk-go
        command: bash -c "make lint"
      - name: linttest
        service: splunk-cloud-sdk-go
        command: bash -c "make linttest"
      - name: build
        service: splunk-cloud-sdk-go
        command: bash -c "make build"


  - name: unit tests
    service: splunk-cloud-sdk-go
    command: bash -c "make run_unit_tests"

  - name: functional tests
    service: splunk-cloud-sdk-go-with-stubby
    command: bash -c "make run_docker_stubby_tests"
    encrypted_dockercfg_path: ci/dockercfg.encrypted

  - type: serial
    name: integration steps
    steps:
    - name: fetch Okta token
      service: splunk-cloud-sdk-shared-token-fetcher
      command: true
      encrypted_dockercfg_path: ci/dockercfg.encrypted
    - type: parallel
      name: integration tests
      steps:
        - name: integration tests - gated
          service: splunk-cloud-sdk-go-integration
          command: bash -c "allow_failures=0 make run_integration_tests"
        - name: run example - gated
          service: splunk-cloud-sdk-go-integration
          tag: ^(master)$
          command: bash -c "allow_failures=0 make run_integration_examples"
          encrypted_dockercfg_path: ci/dockercfg.encrypted
        - name: run example - not gated
          service: splunk-cloud-sdk-go-integration
          exclue: ^(master)$
          command: bash -c "allow_failures=1 make run_integration_examples"
          encrypted_dockercfg_path: ci/dockercfg.encrypted
        - name: WhiteSource Testing
          service: splunk-cloud-sdk-go-whitesource
          command: bash -c "java -jar /opt/whitesource/whitesource-fs-agent.jar \
                                      -c /go/src/github.com/splunk/splunk-cloud-sdk-go/ci/whitesource/whitesource-fs-agent.config \
                                      -d /go/src/github.com/splunk/splunk-cloud-sdk-go \
                                      -apiKey $WHITESOURCE_API_KEY \
                                      -productToken $WHITESOURCE_PRODUCT_TOKEN \
                                      -userKey $WHITESOURCE_USER_KEY"
          tag: (?i)^(master$|release.*)
          encrypted_dockercfg_path: ci/dockercfg.encrypted
