package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os/exec"
	"os"
	"strings"
)

const template = `
// Copyright © 2018 Splunk Inc.
// SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or in part
// without a valid written license from Splunk Inc. is PROHIBITED.
//

package service
// DO NOT edit this file directly
// go:generate go run generate/client_info.go

// Version the released version of the SDK
const Version = "%s"

// UserAgent SDK Client Identifier
const UserAgent = "client-go"`

const targetFile = "service/client_info.go"

func main() {
	content := fmt.Sprintf(template, getVersion())
	buffer := bytes.NewBuffer(nil)
	fmt.Fprint(buffer, content)
	if err := ioutil.WriteFile(targetFile, buffer.Bytes(), 0644); err != nil {
		panic(err)
	}
}

func getVersion() string {
	var (
		cmdOut []byte
		err    error
	)
	cmdName := "git"
	cmdArgs := []string{"describe", "origin", "--tags"}
	if cmdOut, err = exec.Command(cmdName, cmdArgs...).Output(); err != nil {
		fmt.Fprintln(os.Stderr, "There was an error running git command: ", err)
		os.Exit(1)
	}
	version := string(cmdOut)
	return strings.TrimSpace(version[1:])
}
